USE sakila;

#1
SELECT
    CONCAT(c.first_name, ' - ', c.last_name) AS 'Nombre', ad.address, ci.city FROM customer c
    INNER JOIN store sto USING(store_id)
    INNER JOIN address ad ON sto.address_id = ad.address_id
    INNER JOIN city ci USING(city_id)
    INNER JOIN country co USING(country_id) WHERE co.country = 'Argentina';

SELECT
    CONCAT(c.first_name, ' - ', c.last_name) AS 'Nombre', ad.address ci.city FROM customer c
    INNER JOIN address ad USING(address_id)
    INNER JOIN city ci USING(city_id)
    INNER JOIN country co USING(country_id) WHERE co.country = 'Argentina';

#2 
SELECT f.title, l.name, f.rating, CASE
        WHEN f.rating LIKE 'G' THEN 'All ages admitted'
        WHEN f.rating LIKE 'PG' THEN 'Some material may not be suitable for children'
        WHEN f.rating LIKE 'PG-13' THEN 'Some material may be inappropriate for children under 13'
        WHEN f.rating LIKE 'R' THEN 'Under 17 requires accompanying parent or adult guardian'
        WHEN f.rating LIKE 'NC-17' THEN 'No one 17 and under admitted' END 'Rating Text' 
        FROM film f
        INNER JOIN language l USING(language_id);

#3
SELECT ac.actor_id,
    CONCAT( ac.first_name,' - ', ac.last_name),f.film_id,f.title
FROM film f
    INNER JOIN film_actor USING(film_id)
    INNER JOIN actor ac USING(actor_id)
WHERE
    CONCAT(first_name, ' ', last_name) LIKE TRIM(UPPER('PENELOPE GUINESS'));

#4
SELECT f.title, r.rental_date, c.first_name,
    CASE
        WHEN r.return_date IS NOT NULL THEN 'Yes'
        ELSE 'No' END 'Returned'
FROM rental r
    INNER JOIN inventory i USING(inventory_id)
    INNER JOIN film f USING(film_id)
    INNER JOIN customer c USING(customer_id)
WHERE
    MONTH(r.rental_date) = '05'
    OR MONTH(r.rental_date) = '06'
    ORDER BY r.rental_date;

#5 Investigate the CAST and CONVERT functions. Explain the differences, if any, and write examples based on sakila DB.
The CAST() function converts a value (of any type) into a specified datatype. CAST(value AS data type)
The CONVERT() function converts a value (of any type) into a specified datatype.
CONVERT(value, type) /  CONVERT(value USING character set).
Differences:
 Diference of Syntaxs
-CONVERT can be used to convert data between character sets.
-CAST is part of the ANSI-SQL specification (runs in all modern vendor databases).
CONVERT is not. 
CONVERT is a specific implementation of SQL.

Types that can be used:
DATE Converts the value to DATE. Format: "YYYYY-MM-DD".
DATETIME Converts the value to DATETIME. Format: "YYYYY-MM-DD HH:MM:SS".
DECIMAL Converts the value to DECIMAL.
TIME Converts the value to TIME. Format: "HH:MM:SS".
CHAR Converts the value to CHAR (a fixed length string).
NCHAR Converts the value to NCHAR (like CHAR, but produces a string with the national character set)
SIGNED Converts the value to SIGNED (a 64-bit signed integer)
UNSIGNED Converts the value to UNSIGNED (a 64-bit unsigned integer)
BINARY


#6 Investigate NVL, ISNULL, IFNULL, COALESCE, etc type of function. Explain what they do. Which ones are not in MySql and write usage examples.
NVL(expr1, expr2) : In SQL, NVL() converts a null value to an actual value. Data types that can be used are date, character and number. Data type must match with each other i.e. expr1 and expr2 must of same data type.
Syntax –
NVL (expr1, expr2)
expr1 is the source value or expression that may contain a null.
expr2 is the target value for converting the null.

Example –
SELECT  salary, NVL(commission_pct, 0),
    (salary*12) + (salary*12*NVL(commission_pct, 0))
      annual_salary FROM employees;
(supported by oracle)

The MySQL ISNULL() function is used for checking whether an expression is NULL or not. This function returns 1 if the expression passed is NULL, else it returns 0.

The ISNULL() function accepts the expression as a parameter and returns an integer a value 0 or 1 depending on the parameter passed.

Syntax:
ISNULL(expression)
(supported by sqlserver)

IFNULL(): lets you return an alternative value if the expression is null
Ej: SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))
FROM Products; 
(supported by mysql)

The MySQL COALESCE() function is used for returning the first non-null value in a list of expressions. If all the values in the list evaluate to NULL, then the COALESCE() function returns NULL.

The COALESCE() function accepts one parameter which is the list which can contain various values. The value returned by the MySQL COALESCE() function is the first non-null value in a list of expressions or NULL if all the values in a list are NULL.

Syntax:
COALESCE(value_1, value_2, ...., value_n)

Example: Implementing COALESCE() function on a list.
SELECT COALESCE(NULL, 'A', 'B', NULL); 
(supported by mysql)

